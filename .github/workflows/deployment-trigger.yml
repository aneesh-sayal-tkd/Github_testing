name: Deployment Trigger
on:
  push:
    branches: [tst, prd]

permissions:
  contents: read
  actions: read

jobs:
  trigger-harness-pipeline:
    runs-on: ubuntu-latest
    outputs:
      harness_status: ${{ steps.set-harness-status.outputs.status }}
    steps:
       - name: Checkout code
         uses: actions/checkout@v4
         
       - name: Check Previous PR Workflow Status
         id: check-pr-status
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         run: |
           echo "üîç Checking status of previous PR workflow..."
           
           COMMIT_MSG=$(git log -1 --pretty=%B | head -1)
           if [[ "$COMMIT_MSG" =~ Merge\ pull\ request\ #([0-9]+) ]]; then
             PR_NUMBER="${BASH_REMATCH[1]}"
             echo "üîó Found PR: #$PR_NUMBER"
           else
             echo "‚ùå Could not extract PR number from merge commit: $COMMIT_MSG"
             exit 1
           fi
           
           REPO="${{ github.repository }}"
           
           PR_INFO=$(gh api "repos/$REPO/pulls/$PR_NUMBER")
           HEAD_SHA=$(echo "$PR_INFO" | jq -r '.head.sha')
           
           MATCHING_RUNS=$(gh api "repos/$REPO/actions/runs" --paginate \
             --jq '.workflow_runs[] | select(.head_sha == "'$HEAD_SHA'" and (.name == "PR Validation" or .name == "Security Analysis" or .name == "Code Owner Approval" or .name == "Platform Approval") and .event == "pull_request")')
           
           if [[ -z "$MATCHING_RUNS" ]]; then
             echo "‚ùå No workflow run found for head SHA: $HEAD_SHA"
             exit 1
           fi
           
           echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
           echo "workflow_validated=true" >> $GITHUB_OUTPUT
           
       - name: Determine migration configuration
         id: migration-config
         run: |
           BRANCH_NAME="${{ github.ref_name }}"
         
           if [[ "$BRANCH_NAME" == "tst" ]]; then
             echo "migration_type=dev-to-tst" >> $GITHUB_OUTPUT
             echo "environment=tst" >> $GITHUB_OUTPUT
             echo "requires_platform_approval=false" >> $GITHUB_OUTPUT
           elif [[ "$BRANCH_NAME" == "prd" ]]; then
             echo "migration_type=tst-to-prd" >> $GITHUB_OUTPUT
             echo "environment=prd" >> $GITHUB_OUTPUT
             echo "requires_platform_approval=true" >> $GITHUB_OUTPUT
           fi
          
           echo "üéØ Target branch: $BRANCH_NAME"
           echo "üì¶ Migration type: $(grep migration_type $GITHUB_OUTPUT | cut -d'=' -f2)"
           
       - name: Get commit details
         id: commit-info
         run: |
           echo "commit_message=$(git log -1 --pretty=%B | head -1)" >> $GITHUB_OUTPUT
           echo "commit_author=$(git log -1 --pretty=%an)" >> $GITHUB_OUTPUT
           echo "commit_sha=${{ github.sha }}" >> $GITHUB_OUTPUT
           
       - name: Get PR details from merge commit
         id: pr-info
         run: |
           PR_NUMBER="${{ steps.check-pr-status.outputs.pr_number }}"
           echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
           echo "pr_url=https://github.com/${{ github.repository }}/pull/$PR_NUMBER" >> $GITHUB_OUTPUT
           
       - name: Trigger Harness Pipeline
         id: trigger-pipeline
         run: |
           echo "üöÄ Triggering Harness pipeline for ${{ steps.migration-config.outputs.migration_type }}"
           
           if [[ "${{ steps.migration-config.outputs.requires_platform_approval }}" == "true" ]]; then
             PLATFORM_APPROVAL_STATUS="required_and_approved"
             echo "‚úÖ Production deployment - Platform approval was required and granted"
           else
             PLATFORM_APPROVAL_STATUS="not_required"
             echo "‚ÑπÔ∏è Test deployment - Platform approval not required"
           fi
          
           JOB_STATUSES=$(cat <<EOF
           {
             "validate_pr": "success",
             "code_security": {
               "codeql": "success",
               "copilot_autofix": "completed_in_pr",
               "had_security_issues": "checked_in_pr",
               "issues_acknowledged": "resolved_in_pr"
             },
             "codeowner_approval": "success",
             "platform_approval": {
               "status": "$PLATFORM_APPROVAL_STATUS",
               "required": "${{ steps.migration-config.outputs.requires_platform_approval }}"
             },
             "workflow_run_id": "${{ github.run_id }}",
             "pr_number": "${{ steps.check-pr-status.outputs.pr_number }}"
           }
           EOF
           )
          
           RESPONSE=$(curl -s -w "%{http_code}" -X POST "${{ secrets.HARNESS_WEBHOOK_URL }}" \
             -H "Content-Type: application/json" \
             -d "{
               \"repository\": \"${{ github.server_url }}/${{ github.repository }}\",
               \"triggered_by\": \"${{ github.actor }}\",
               \"migration_type\": \"${{ steps.migration-config.outputs.migration_type }}\",
               \"environment\": \"${{ steps.migration-config.outputs.environment }}\",
               \"PR_URL\": \"${{ steps.pr-info.outputs.pr_url }}\",
               \"EDB_ID\": \"${{ vars.EDB_ID }}\",
               \"job_statuses\": $JOB_STATUSES,
               \"commit_sha\": \"${{ github.sha }}\",
               \"commit_author\": \"${{ steps.commit-info.outputs.commit_author }}\",
               \"branch_name\": \"${{ github.ref_name }}\",
               \"requires_platform_approval\": \"${{ steps.migration-config.outputs.requires_platform_approval }}\"
             }")
          
           HTTP_CODE="${RESPONSE: -3}"
           RESPONSE_BODY="${RESPONSE%???}"
         
           if [[ "$HTTP_CODE" -ge 200 && "$HTTP_CODE" -lt 300 ]]; then
             echo "‚úÖ Successfully triggered Harness pipeline"
             echo "triggered=true" >> $GITHUB_OUTPUT
           else
             echo "‚ùå Failed to trigger Harness pipeline (HTTP $HTTP_CODE)"
             echo "triggered=false" >> $GITHUB_OUTPUT
             echo "Response: $RESPONSE_BODY"
             exit 1
           fi
           
       - name: Set Harness status
         id: set-harness-status
         if: always()
         run: |
           if [[ "${{ steps.trigger-pipeline.outputs.triggered }}" == "true" ]]; then
             echo "status=success" >> $GITHUB_OUTPUT
           else
             echo "status=failure" >> $GITHUB_OUTPUT
           fi

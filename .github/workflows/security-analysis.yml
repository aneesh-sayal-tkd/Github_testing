name: Security Analysis
on:
  workflow_run:
    workflows: ["PR Validation"]
    types: [completed]
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]
    branches: [tst, prd]

permissions:
  contents: read
  pull-requests: write
  security-events: write
  actions: read

jobs:
  code-security:
    name: code-security
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event.workflow_run.conclusion == 'success'
    outputs:
      codeql_status: ${{ steps.set-codeql-status.outputs.status }}
      copilot_status: ${{ steps.set-copilot-status.outputs.status }}
      has_security_issues: ${{ steps.check-security-issues.outputs.has_issues }}
      issues_acknowledged: ${{ steps.check-acknowledgment.outputs.acknowledged }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality
        
      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: Perform CodeQL Analysis
        id: codeql-analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
          
      - name: Check for CodeQL Security Issues
        id: check-security-issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          REPO="${{ github.repository }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          
          sleep 10
          
          ALERTS=$(gh api "repos/$REPO/code-scanning/alerts" \
            --jq '[.[] | select(.state == "open" and (.rule.security_severity_level == "high" or .rule.security_severity_level == "critical"))] | length' 2>/dev/null || echo "0")
          
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          
          NEW_ALERTS=$(gh api "repos/$REPO/code-scanning/alerts" \
            --jq '[.[] | select(.state == "open" and .most_recent_instance.commit_sha == "'$HEAD_SHA'" and (.rule.security_severity_level == "high" or .rule.security_severity_level == "critical"))] | length' 2>/dev/null || echo "0")
          
          echo "Total open high/critical alerts: $ALERTS"
          echo "New alerts in this PR: $NEW_ALERTS"
          
          if [[ "$NEW_ALERTS" -gt 0 ]]; then
            echo "has_issues=true" >> $GITHUB_OUTPUT
            echo "❌ Found $NEW_ALERTS new high/critical security issues in this PR"
            
            gh api "repos/$REPO/code-scanning/alerts" \
              --jq '[.[] | select(.state == "open" and .most_recent_instance.commit_sha == "'$HEAD_SHA'" and (.rule.security_severity_level == "high" or .rule.security_severity_level == "critical")) | {rule: .rule.description, severity: .rule.security_severity_level, location: .most_recent_instance.location, url: .html_url}]' \
              > codeql_issues.json 2>/dev/null || echo "[]" > codeql_issues.json
            
            echo "## 🚨 CodeQL Security Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "This PR introduces **$NEW_ALERTS** new high/critical security issues:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [[ -s codeql_issues.json ]]; then
              jq -r '.[] | "- **" + (.severity // "unknown") + "**: " + (.rule // "Unknown Rule") + " in `" + ((.location.path // "Unknown") + ":" + (.location.start_line | tostring)) + "`"' codeql_issues.json >> $GITHUB_STEP_SUMMARY
            fi
            
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "📝 **Copilot Autofix**: Check the Security tab for automated fix suggestions" >> $GITHUB_STEP_SUMMARY
          else
            echo "has_issues=false" >> $GITHUB_OUTPUT
            echo "✅ No new high/critical security issues found"
          fi
          
      - name: Post Security Issues Comment
        if: steps.check-security-issues.outputs.has_issues == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            let commentBody = `## 🚨 Security Issues Detected\n\n`;
            commentBody += `This PR introduces new high/critical security issues that must be addressed.\n\n`;
            
            let issues = [];
            try {
              if (fs.existsSync('codeql_issues.json')) {
                const content = fs.readFileSync('codeql_issues.json', 'utf8').trim();
                if (content && content !== '[]') {
                  issues = JSON.parse(content);
                }
              }
            } catch (error) {
              console.log('Could not read issues file:', error.message);
            }
            
            if (issues.length > 0) {
              commentBody += `### Issues Found:\n\n`;
              for (let i = 0; i < issues.length; i++) {
                const issue = issues[i];
                commentBody += `**${i + 1}. ${issue.rule || 'Security Issue'}**\n`;
                commentBody += `- **Severity:** ${issue.severity || 'Unknown'}\n`;
                commentBody += `- **Location:** \`${issue.location?.path || 'Unknown'}:${issue.location?.start_line || 'Unknown'}\`\n`;
                if (issue.url) {
                  commentBody += `- **[View Details](${issue.url})**\n`;
                }
                commentBody += `\n`;
              }
            }
            
            commentBody += `### 🤖 Copilot Autofix Available\n`;
            commentBody += `GitHub Copilot Autofix has been enabled for this repository. Check the **Security tab** for automated fix suggestions.\n\n`;
            commentBody += `### Next Steps:\n`;
            commentBody += `1. ✅ **Review Copilot Autofix suggestions** in the Security tab\n`;
            commentBody += `2. 🔧 **Apply fixes** or implement manual fixes\n`;
            commentBody += `3. 🔄 **Push your changes** to trigger a new security scan\n`;
            commentBody += `4. 🚫 **Or acknowledge issues** by commenting: \`/acknowledge-security-issues\`\n\n`;
            commentBody += `⚠️ **The workflow is blocked until these issues are resolved or acknowledged.**`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });
            
      - name: Check for Issue Acknowledgment
        id: check-acknowledgment
        if: steps.check-security-issues.outputs.has_issues == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER="${{ github.event.pull_request.number }}"
          REPO="${{ github.repository }}"
          
          ACKNOWLEDGED=$(gh api "repos/$REPO/issues/$PR_NUMBER/comments" \
            --jq '.[] | select(.body | contains("/acknowledge-security-issues")) | .user.login' | head -1)
          
          LABEL_EXISTS=$(gh api "repos/$REPO/issues/$PR_NUMBER/labels" \
            --jq '.[] | select(.name == "security-issues-acknowledged") | .name' | head -1)
          
          if [[ -n "$ACKNOWLEDGED" || -n "$LABEL_EXISTS" ]]; then
            echo "acknowledged=true" >> $GITHUB_OUTPUT
            echo "✅ Security issues acknowledged by: $ACKNOWLEDGED"
            
            if [[ -z "$LABEL_EXISTS" ]]; then
              gh api "repos/$REPO/issues/$PR_NUMBER/labels" \
                -f labels[]="security-issues-acknowledged" || true
            fi
          else
            echo "acknowledged=false" >> $GITHUB_OUTPUT
            echo "❌ Security issues not yet acknowledged"
          fi
          
      - name: Block if Security Issues Not Resolved or Acknowledged
        if: steps.check-security-issues.outputs.has_issues == 'true' && steps.check-acknowledgment.outputs.acknowledged == 'false'
        run: |
          echo "🚫 WORKFLOW BLOCKED: Security issues detected and not acknowledged"
          echo "Please either:"
          echo "  1. Fix the security issues using Copilot Autofix suggestions"
          echo "  2. Push your changes to trigger a new security scan"
          echo "  3. Comment '/acknowledge-security-issues' to proceed with known issues"
          exit 1
          
      - name: Set CodeQL status
        id: set-codeql-status
        if: always()
        run: |
          if [[ "${{ steps.codeql-analysis.outcome }}" == "success" ]]; then
            if [[ "${{ steps.check-security-issues.outputs.has_issues }}" == "true" && "${{ steps.check-acknowledgment.outputs.acknowledged }}" == "false" ]]; then
              echo "status=blocked" >> $GITHUB_OUTPUT
            else
              echo "status=success" >> $GITHUB_OUTPUT
            fi
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi
          
      - name: Set Copilot status
        id: set-copilot-status
        if: always()
        run: |
          if [[ "${{ steps.check-security-issues.outputs.has_issues }}" == "true" ]]; then
            echo "status=autofix_available" >> $GITHUB_OUTPUT
          else
            echo "status=not_needed" >> $GITHUB_OUTPUT
          fi

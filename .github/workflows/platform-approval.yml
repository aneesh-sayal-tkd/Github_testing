name: Platform Approval
on:
  workflow_run:
    workflows: ["Code Owner Approval"]
    types: [completed]
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]
    branches: [prd]

permissions:
  contents: write
  pull-requests: write
  issues: write
  statuses: write

jobs:
  platform-approval-check:
    name: platform-approval-check
    runs-on: ubuntu-latest
    if: (github.event_name == 'pull_request' && github.base_ref == 'prd') || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    outputs:
      status: ${{ steps.set-platform-status.outputs.status }}
      requires_approval: ${{ steps.check-environment.outputs.requires_approval }}
    steps:
      - name: Check if Platform Approval Required
        id: check-environment
        run: |
          if [[ "${{ github.base_ref }}" == "prd" || "${{ github.event.workflow_run.head_branch }}" == "prd" ]]; then
            echo "requires_approval=true" >> $GITHUB_OUTPUT
            echo "üî¥ PRODUCTION deployment detected - Platform approval REQUIRED"
          else
            echo "requires_approval=false" >> $GITHUB_OUTPUT
            echo "üü¢ TEST deployment - Platform approval not required"
          fi
          
      - name: Get PR details for workflow_run events
        if: github.event_name == 'workflow_run'
        id: get-pr
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Find the PR associated with this workflow run
          HEAD_SHA="${{ github.event.workflow_run.head_sha }}"
          PR_DATA=$(gh api "repos/${{ github.repository }}/pulls" --jq ".[] | select(.head.sha == \"$HEAD_SHA\")")
          PR_NUMBER=$(echo "$PR_DATA" | jq -r '.number')
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          
      - name: Create Platform Approval Status Check
        if: steps.check-environment.outputs.requires_approval == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = '${{ github.event.pull_request.number || steps.get-pr.outputs.pr_number }}';
            const headSha = '${{ github.event.pull_request.head.sha || github.event.workflow_run.head_sha }}';
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: headSha,
              state: 'pending',
              target_url: `${context.payload.repository.html_url}/actions/runs/${context.runId}`,
              description: 'Platform approval required for production deployment',
              context: 'platform-approval/production'
            });
            
      - name: Wait for Platform Approval via Issue
        if: steps.check-environment.outputs.requires_approval == 'true'
        id: platform-approval
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üèóÔ∏è Creating platform approval request for PRODUCTION deployment..."
          
          REPO="${{ github.repository }}"
          PR_NUMBER="${{ github.event.pull_request.number || steps.get-pr.outputs.pr_number }}"
          
          PLATFORM_APPROVER_1="${{ vars.PLATFORM_APPROVER_1 }}"
          PLATFORM_APPROVER_2="${{ vars.PLATFORM_APPROVER_2 }}"
          
          if [[ -z "$PLATFORM_APPROVER_1" || -z "$PLATFORM_APPROVER_2" ]]; then
            echo "‚ùå Platform approver usernames not found in repository variables"
            exit 1
          fi
          
          ISSUE_TITLE="üî¥ PRODUCTION Deployment Approval Required - PR #$PR_NUMBER"
          ISSUE_BODY=$(cat <<EOF
          # üî¥ Production Deployment Approval Request
          
          ## üìã Deployment Details
          | Field | Value |
          |-------|-------|
          | **Environment** | üî¥ **PRODUCTION** |
          | **Migration Type** | \`tst ‚Üí prd\` |
          | **Pull Request** | [#$PR_NUMBER](https://github.com/${{ github.repository }}/pull/$PR_NUMBER) |
          | **Requested By** | @${{ github.actor }} |
          | **Workflow** | [View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |
          
          ## ‚úÖ Pre-Deployment Checks Status
          - ‚úÖ **Branch Flow Validation**: Passed
          - ‚úÖ **Security Analysis**: Completed
          - ‚úÖ **Code Owner Approval**: Approved
          
          ## üéØ Required Action
          Please review the production deployment request and respond with **ONE** of the following commands:
          
          ### ‚úÖ To Approve Production Deployment:
          Comment any of: **\`/approve\`**, **\`approved\`**, **\`lgtm\`**, **\`yes\`**
          
          ### ‚ùå To Reject Production Deployment:
          Comment any of: **\`/reject\`**, **\`rejected\`**, **\`deny\`**, **\`no\`**
          
          ## ‚è±Ô∏è Approval Timeline
          - **Timeout**: 24 hours from request creation
          - **Auto-action**: Request will be automatically rejected if no response within timeout
          - **Authorized Approvers**: @$PLATFORM_APPROVER_1 **OR** @$PLATFORM_APPROVER_2
          
          ## üö® Important Notes
          - This is a **PRODUCTION** environment deployment
          - Approval is **MANDATORY** for merge to proceed
          - Only authorized platform team members can approve
          - All security and code quality checks have been completed
          - **If rejected, the PR will be automatically closed**
          
          ---
          *This request was automatically generated by the GitHub Actions workflow.*
          EOF
          )
          
          ISSUE_RESPONSE=$(gh api "repos/$REPO/issues" \
            -f title="$ISSUE_TITLE" \
            -f body="$ISSUE_BODY" \
            -f assignees[]="$PLATFORM_APPROVER_1" \
            -f assignees[]="$PLATFORM_APPROVER_2")
          
          ISSUE_NUMBER=$(echo "$ISSUE_RESPONSE" | jq -r '.number')
          echo "üìã Created PRODUCTION approval issue #$ISSUE_NUMBER"
          echo "issue_number=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          
          gh api "repos/$REPO/issues/$PR_NUMBER/comments" \
            -f body="## üî¥ Production Deployment Approval Required
          This PR targets the **production** branch and requires platform team approval before merging.
          **Approval Issue:** #$ISSUE_NUMBER
          **Status:** ‚è≥ Waiting for platform approval
          **Timeout:** 24 hours
          **Authorized Approvers:** @$PLATFORM_APPROVER_1 or @$PLATFORM_APPROVER_2"
          
      - name: Poll for Platform Approval
        if: steps.check-environment.outputs.requires_approval == 'true'
        id: wait-platform-approval
        timeout-minutes: 1440  # 24 hours
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "‚è≥ Waiting for PRODUCTION platform approval..."
          
          REPO="${{ github.repository }}"
          ISSUE_NUMBER="${{ steps.platform-approval.outputs.issue_number }}"
          PR_NUMBER="${{ github.event.pull_request.number || steps.get-pr.outputs.pr_number }}"
          PLATFORM_APPROVER_1="${{ vars.PLATFORM_APPROVER_1 }}"
          PLATFORM_APPROVER_2="${{ vars.PLATFORM_APPROVER_2 }}"
          
          TIMEOUT_SECONDS=86400  # 24 hours
          POLL_INTERVAL=30
          MAX_ITERATIONS=$((TIMEOUT_SECONDS / POLL_INTERVAL))
          
          for ((i=1; i<=MAX_ITERATIONS; i++)); do
            echo "üîç Check $i/$MAX_ITERATIONS - $(date -u)"
            
            COMMENTS=$(gh api "repos/$REPO/issues/$ISSUE_NUMBER/comments" --jq '.')
            
            while IFS= read -r comment; do
              if [[ -z "$comment" || "$comment" == "null" ]]; then
                continue
              fi
              
              COMMENT_AUTHOR=$(echo "$comment" | jq -r '.user.login')
              COMMENT_BODY=$(echo "$comment" | jq -r '.body' | tr '[:upper:]' '[:lower:]')
              
              if [[ "$COMMENT_AUTHOR" == "$PLATFORM_APPROVER_1" || "$COMMENT_AUTHOR" == "$PLATFORM_APPROVER_2" ]]; then
                echo "üí¨ Comment from authorized approver @$COMMENT_AUTHOR"
                
                if [[ "$COMMENT_BODY" =~ (approve|approved|lgtm|yes|/approve) ]]; then
                  echo "üéâ PRODUCTION DEPLOYMENT APPROVED by @$COMMENT_AUTHOR!"
                  echo "approved=true" >> $GITHUB_OUTPUT
                  echo "approver=$COMMENT_AUTHOR" >> $GITHUB_OUTPUT
                  exit 0
                fi
                
                if [[ "$COMMENT_BODY" =~ (reject|rejected|deny|denied|no|/reject) ]]; then
                  echo "‚ùå PRODUCTION DEPLOYMENT REJECTED by @$COMMENT_AUTHOR"
                  echo "approved=false" >> $GITHUB_OUTPUT
                  echo "rejected=true" >> $GITHUB_OUTPUT
                  echo "rejector=$COMMENT_AUTHOR" >> $GITHUB_OUTPUT
                  
                  gh api "repos/$REPO/pulls/$PR_NUMBER" \
                    -f state="closed" \
                    -X PATCH
                  
                  gh api "repos/$REPO/issues/$PR_NUMBER/comments" \
                    -f body="## ‚ùå PR Automatically Closed - Production Deployment Rejected
          
          **Status**: This PR has been automatically closed due to platform team rejection.
          **Rejected By**: @$COMMENT_AUTHOR"
                  
                  exit 0
                fi
              fi
            done <<< "$(echo "$COMMENTS" | jq -c '.[]')"
            
            sleep $POLL_INTERVAL
          done
          
          echo "‚è∞ TIMEOUT: No response received within 24 hours"
          echo "approved=false" >> $GITHUB_OUTPUT
          echo "timeout=true" >> $GITHUB_OUTPUT
          
      - name: Set Platform Approval Status
        id: set-platform-status
        if: always()
        run: |
          if [[ "${{ steps.check-environment.outputs.requires_approval }}" == "false" ]]; then
            echo "status=not_required" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.wait-platform-approval.outputs.approved }}" == "true" ]]; then
            echo "status=approved" >> $GITHUB_OUTPUT
          elif [[ "${{ steps.wait-platform-approval.outputs.rejected }}" == "true" ]]; then
            echo "status=rejected_and_closed" >> $GITHUB_OUTPUT
          else
            echo "status=timeout_or_failed" >> $GITHUB_OUTPUT
          fi
